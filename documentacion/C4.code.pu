@startuml BillsGenerator.C4
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml
!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5
!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons2

!include DEVICONS/phoenix.puml
!include DEVICONS/postgresql.puml
!include DEVICONS/elixir.puml
!include FONTAWESOME/euro_sign.puml

HIDE_STEREOTYPE()
LAYOUT_WITH_LEGEND()

System_Boundary(sistema, "BillsGenerator\n Backend\n<$elixir>") {

frame "Core"{
interface GenServer{
}


interface GenFilter{
    service_handler:ServiceHandler()
--
   @GenFilter
    +start_link()
    +process_filter(input_data)
    +stop()
    +redirect(worker,output_data)
    +get_num_workers()
    +alive?()
    +on_error(module(),any(),any())
    +worker_action(any())
    +next_action(any())

    @Macro --> GenFilterWorker
        +do_process_filter(input_data | error)
    
--
    @GenServer
    #init()
    #handle_cast({:process_filter,input_data,client},service_handler)
    #handle_cast({:redirect,worker,output_data},service_handler)
    #handle_call(:get_num_workers,service_handler)
    #handle_info({:check,period},service_handler)
    #handle_info({:EXIT, _dead_worker, reason}, service_handler)
--
    -check_services_worload(period)
    -handle_worload_rate(service_handler,worload_rate)  
}



interface GenFilterWorker{
@GenFilterWorker
    +start_link(leader,name)
    +process_filter(server,input_data)
    +stop(worker)
    +do_process_filter(any())
--
@GenServer
    #init({leader,name})
    #handle_cast({:process_filter,input_data},{leader,name})    
}

struct service_handler{
    leader_module: module()
    worker_module: module()
    workers: List(GenServer.server())
    free_workers: Queue(GenServer.server())
    busy_workers: Map(GenServer.server())
    request_queue: Queue(client,input_data)
    min_workers: pos_integer
    next_worker_id: pos_integer
}

class ServiceHandler{   
    handler:service_handler.t()
--
    +new(leader_module,worker_module,min_workers)
    +restore(handler)
    +spawn_worker(handler)
    +spawn_workers(handler,n)
    +kill_worker(handler)
    +kill_workers(handler,n)
    +all_workers_busy?(handler)
    +any_pending_request?(handler)
    +enqueue_request(handler)
    +dequeue_request(handler)
    +assign_job(handler,{client,input_data}=request)
    +assign_job(handler)
    +assign_jobs(handler,n)
    +free_worker(handler,worker)
    +total_pending_request(handler)
    +total_free_workers(handler)
    +total_workers(handler)
    +stop_workers(handler)
}

}

frame "Tactics"{
class FilterStash{
    +start_link()
    +stop(server)
    +put_handler(filter,handler)
    +get_handler(handler)
@genserver
#init()
#handle_call(:put_handler|:get_handler)  
}

class PipelineMonitor{
    +start_link()
    +stop(server)
    +get_filter_info
@GenServer
    #init()
    #handle_info({sample_filters_workers, period},filters_info)
--
    -check_filters(period)
    -print_filters_info(filters_info)
}

}

frame "Entities"{
struct billrequest{
    user:String.t()
    bill:Bill
    config:BillConfig
}

BillRequest  *-- Bill 
BillRequest  *-- BillConfig
Bill  *-- Product


class BillRequest{
    billrequest:billrequest.t()
--
    +new(user,bill,config)
    +validate(billrequest)
    -validate_user(user)
}

struct billconfig{
    font_size:non_neg_integer()
    font_style:String.t()
    paper_size:String.t()
    landscape:boolean
    currency:String.t()
    language:String.t()
}

class BillConfig{
    billconfig: billconfig.t()
--
    +new(font_size,font_style,paper_size,landscape)
    +validate(billconfig)
    -validate_font_size(font_size)
    -validate_font_style(font_style)
    -validate_paper_size(paper_size)
    -validate_landscape(landscape)
    -validate_currency(currency)
    -validate_language(language)
}

struct bill{
    title:String.t()
    purchaser:String.t()
    seller:String.t()
    products:list(Product)
    total:float()
    total_before_taxes:float()
    taxes_amount:float()
    date:String.t()
    taxes:float()
}

class Bill{
    bill:bill.t()
--
    +new(title,purchaser,sellerdate, products,taxes)
    +update_total(bill)
    +validate(bill)
    -calculate_bill(products)
    -validate_title(title)
    -validate_purchaser(purchaser)
    -validate_seller(seller)
    -validate_products(products)
    -validate_taxes(taxes)
    -validate_date(date)
    -calculate_taxes(taxes,total_before_taxes)

}

struct product{
    name:String.t()
    price:number()
    quantity:number()
    total: number()
    discount: number(),
    discounted_amount: nil | number(),
}

class Product{
    product:product.t()
--
    +new(name,price,quantity)
    +update_total(product)
    +validate(product)
    -calculate_total(product)
    -validate_name(name)
    -validate_price(price)
    -validate_quantity(quantity)
    -validate_discount(discount)
}
}



class Aplicacion{}


frame "Filters"{
class BillParser{
    +worker_action(%{bill_id,json_bill}=input_data)
    +next_action(output_data)
    -parse_json(json_bill)
}


class BillValidator{
    +worker_action(%{bill_id,bill_request}=input_data)
    +next_action(output_data)
    -validate_request!(bill_request)
}

class BillCalculator{
    +worker_action(%{bill_id,bill_request}=input_data)
    +next_action(output_data)
    -update_bill(bill_request)
}

class LatexFormatter{
    +worker_action(%{bill_id,bill_request}=input_data)
    +next_action(output_data)
    -generate_latex(bill_request)
    -latex_styler(config)
    -font_styler(font)
    -landscape?(T/F)
    -format_bill(products,total)
}

class LatexToPdf{
    +worker_action(%{bill_id,bill_request,latex}=input_data)
    +next_action(output_data)
    -generate_pdf!(latex)
}

class StoreInDatabase{
    +worker_action(%{bill_id,bill_request,pdf}=input_data)
    +next_action(output_data | error)
    +on_error(caused_by,error_msg,bill_id)
}
}

frame "Repository"{
interface Ecto{
    Ecto.Repo
    Ecto.Schema
    Ecto.Changeset
}

class BillDao{
    changeset(bill=[:user, :title, :pdf, :error, error_msg]},attrs)
}
}

entity "Phoenix"{
    PubSub System
}

BillValidator -- BillRequest : < usa
BillCalculator -- BillRequest : < usa
LatexFormatter -- BillRequest : < usa
LatexToPdf -- BillRequest : < usa
StoreInDatabase -- BillRequest : < usa
StoreInDatabase -- BillDao : < usa 

BillDao --> Ecto : < Schema
Repo --> Ecto : < Repo


GenFilter -D-> GenServer
GenFilterWorker -D-> GenServer
'Lay_R(GenFilterWorker,GenServer)
ServiceHandler *-R- GenFilterWorker
GenFilter *-L- ServiceHandler

FilterStash -D-> GenServer
GenFilter -- FilterStash: < usa

Aplicacion -D- Filters : < xestiona 
Aplicacion -D- Repository : < xestiona 
Aplicacion -D- Tactics : < xestiona 
Aplicacion -D- Phoenix : < xestiona 

BillParser --> GenFilter
BillValidator --> GenFilter
BillCalculator  --> GenFilter
LatexFormatter --> GenFilter
LatexToPdf --> GenFilter
LatexToPdf --> GenFilter
StoreInDatabase --> GenFilter

billrequest -U- BillRequest
billconfig -U- BillConfig
bill -U- Bill
service_handler -U- ServiceHandler
product -U- Product

}


@enduml 5