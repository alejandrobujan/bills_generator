@startuml bills_generator_code

frame "Elixir"{
    interface GenServer
    interface Application
    interface Supervisor
}

frame "Core"{
    interface GenFilter implements GenServer{
        +start_link()
        +process_filter(input_data)
        +stop()
        +redirect(worker,output_data)
        +get_num_workers()
        +alive?()
        +on_error(caused_by,error_msg,input_data)
        +worker_action(input_data)
        +next_action(output_data)
        -check_services_worload(period)
        -handle_worload_rate(service_handler,worload_rate)  
    }

    interface GenFilterWorker{
        +start_link(leader,name)
        +process_filter(server,input_data)
        +stop(worker)
        +do_process_filter(input_data)
    }

    class FilterHandler{   
        +request_queue: queue
        +min_workers: pos_integer
        +next_worker_id: pos_integer
        +new(leader_module,worker_module,min_workers)
        +restore(handler)
        +spawn_worker(handler)
        +spawn_workers(handler,n)
        +spawn_and_assign_workers(handler,n)
        +kill_worker(handler)
        +kill_workers(handler,n)
        +all_workers_busy?(handler)
        +any_pending_request?(handler)
        +enqueue_request(handler)
        +dequeue_request(handler)
        +assign_job(handler,request)
        +assign_job(handler)
        +assign_jobs(handler,n)
        +free_worker(handler,worker)
        +total_pending_request(handler)
        +total_free_workers(handler)
        +total_workers(handler)
        +stop_workers(handler)
    }
    GenFilterWorker "N" <--o "1" FilterHandler: workers
    GenFilterWorker "N" <--o "1" FilterHandler: free_workers
    GenFilterWorker "N" <--o "1" FilterHandler: busy_workers : %{GenServer.server => GenServer.from}
    GenFilterWorker "1" <--o "1" FilterHandler: worker_module
    GenFilter "1" <--o "1" FilterHandler: leader_module

    GenFilter "1" o--> "1" FilterHandler: handler



}
    


frame "Tactics"{
    class FilterStash implements GenServer{
        +start_link()
        +stop(server)
        +put_handler(filter,handler)
        +get_handler(handler)
    }

    class PipelineMonitor implements GenServer{
        +start_link()
        +stop(server)
        +get_filter_info(filter)
        -check_filters(period)
        -print_filters_info(filters_info)
    }

}

frame "Entities"{


    class BillRequest{
        +user: String
        +new(user,bill,config)
        +validate(billrequest)
        -validate_user(user)
    }

    BillRequest "1" o--> "1" Bill: bill
    BillRequest "1" o--> "1" BillConfig: bill_config

    class BillConfig{
        +font_size: non_neg_integer
        +font_style: String
        +paper_size: String
        +landscape: boolean
        +currency: String
        +language: String
        +new(font_size,font_style,paper_size,landscape)
        +validate(billconfig)
        -validate_font_size(font_size)
        -validate_font_style(font_style)
        -validate_paper_size(paper_size)
        -validate_landscape(landscape)
        -validate_currency(currency)
        -validate_language(language)
    }

    class Bill{
        +title: String
        +purchaser: String
        +seller: String
        +total: number
        +total_before_taxes: number
        +taxes_amount: number
        +date: String
        +taxes: number
        +new(title,purchaser,seller,date,products,taxes)
        +update_total(bill)
        +validate(bill)
        -calculate_bill(products)
        -validate_title(title)
        -validate_purchaser(purchaser)
        -validate_seller(seller)
        -validate_products(products)
        -validate_taxes(taxes)
        -validate_date(date)
        -calculate_taxes(taxes,total_before_taxes)
    }

    Bill "1" o--> "N" Product: products

    class Product{
        name: String
        price: number
        quantity: number
        total: number
        discount: number
        discounted_amount: number 
        +new(name,price,quantity)
        +update_total(product)
        +validate(product)
        -calculate_total(product)
        -validate_name(name)
        -validate_price(price)
        -validate_quantity(quantity)
        -validate_discount(discount)
    }
}




frame "Filters"{
    class BillParser implements GenFilter{
        -parse_json(json_bill)
    }

    class BillValidator implements GenFilter{
        -validate_request!(bill_request)
    }

    class BillCalculator implements GenFilter{
        -update_bill(bill_request)
    }

    class LatexFormatter implements GenFilter{
        -generate_latex(bill_request)
        -latex_styler(config)
        -font_styler(font)
        -landscape?(landscape_value)
        -format_bill(products,total)
    }

    class LatexToPdf implements GenFilter{
        -generate_pdf!(latex)
    }

    class StoreInDatabase implements GenFilter
    BillParser -R-> BillRequest
    BillParser --> BillValidator

    BillValidator -R-> BillRequest
    BillValidator --> BillCalculator

    BillCalculator -R-> BillRequest
    BillCalculator --> LatexFormatter

    LatexFormatter -R-> BillRequest
    LatexFormatter --> LatexToPdf

    LatexToPdf --> StoreInDatabase

    StoreInDatabase -R-> BillRequest
    StoreInDatabase -R-> Repository.BillDao
    StoreInDatabase -R-> Repository.Repo

}



interface Ecto.Schema
interface Ecto.Repo
class Repository.BillDao implements Ecto.Schema{
    +user: String
    +title: String
    +pdf: binary
    +error: boolean
    +error_msg: String
}

class Repository.Repo implements Ecto.Repo




frame "Phoenix"{
    interface Router
    interface Controller
}


frame "BillsGeneratorWeb"{
    class BillsGeneratorWeb.Router implements Router
    class BillsGeneratorWeb.BillController implements Controller
    BillsGeneratorWeb.Router --> BillsGeneratorWeb.BillController
}

class BillsGenerator.Application implements Application{
    +generate_bill(bill_json)
}
BillsGeneratorWeb.BillController --> BillsGenerator.Application

BillsGenerator.Application --> Filters
BillsGenerator.Application --> Repository.BillDao
BillsGenerator.Application --> Repository.Repo
BillsGenerator.Application --> Supervisor

class Poison.Poison{
    +decode!(json)
}

class Iona.Iona

BillParser --> Poison.Poison
LatexToPdf --> Iona.Iona


Filters --> FilterStash

PipelineMonitor o--> Filters


@enduml 

